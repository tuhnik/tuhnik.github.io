{"version":3,"sources":["App.js","index.js"],"names":["App","state","data","country","countries","year","title","x","y","this","getData","getCountries","_this2","axios","get","then","res","setState","_this3","concat","dataToPlot","forEach","el","push","age","total","_this4","value","_this5","_this6","countryOptionItems","map","i","react_default","a","createElement","key","yearOptionItems","Object","toConsumableArray","Array","className","react_plotly_default","type","layout","react_selectize_src","placeholder","onValueChange","updateCountry","updateYear","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"+RAoFeA,6MA9EbC,MAAM,CACJC,KAAM,GACNC,QAAS,UACTC,UAAW,GACXC,KAAM,KACNC,MAAO,GACPC,EAAG,GACHC,EAAG,uFAIHC,KAAKC,UACLD,KAAKE,sDAEO,IAAAC,EAAAH,KACZI,IAAMC,IAAN,4CACGC,KAAK,SAAAC,GACNJ,EAAKK,SAAS,CAACb,UAAWY,EAAId,KAAKE,gDAI9B,IAAAc,EAAAT,KACPI,IAAMC,IAAN,4CAAAK,OAAsDV,KAAKR,MAAMI,KAAjE,KAAAc,OAAyEV,KAAKR,MAAME,QAApF,kBACCY,KAAK,SAAAC,GACJE,EAAKD,SAAS,CAAEf,KAAMc,EAAId,MAAQ,WAChCgB,EAAKE,sDAMT,IAAIb,EAAI,GACJC,EAAI,GACRC,KAAKR,MAAMC,KAAKmB,QAAQ,SAAAC,GACtBf,EAAEgB,KAAKD,EAAGE,KACVhB,EAAEe,KAAKD,EAAGG,SAEZhB,KAAKQ,SAAS,CAACV,IAAGC,MAClBC,KAAKQ,SAAS,CAACX,MAAOG,KAAKR,MAAME,QAAS,KAAMM,KAAKR,MAAMI,0CAGlDiB,GAAG,IAAAI,EAAAjB,KACZA,KAAKQ,SAAS,CAACZ,KAAMiB,EAAGK,OAAQ,kBAAKD,EAAKhB,kDAG9BY,GAAG,IAAAM,EAAAnB,KACXa,GAGJb,KAAKQ,SAAS,CAACd,QAASmB,EAAGK,OAAQ,kBAAKC,EAAKlB,6CAEtC,IAAAmB,EAAApB,KACHqB,EAAqBrB,KAAKR,MAAMG,UAAU2B,IAAI,SAAC5B,EAAS6B,GAAV,OACtCC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGL,MAAOxB,GAAUA,KAEzCkC,EAAkBC,OAAAC,EAAA,EAAAD,CAAIE,MAAM,MAAMT,IAAI,SAACT,EAAIU,GAAL,OACxCC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGL,MAAO,IAAMK,EAAE,OAAa,IAAKA,EAAE,SAErD,OAAOC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OAClBR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aACfR,EAAAC,EAAAC,cAAA,OAAKM,UAAY,UAASR,EAAAC,EAAAC,cAAA,+BAA1B,uGACCF,EAAAC,EAAAC,cAAA,OAAKM,UAAY,QACjBR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAMhC,KAAM,CAAC,CAAEM,EAAGC,KAAKR,MAAMO,EAAGmC,KAAM,SAAWC,OAAQ,CAAEtC,MAAOG,KAAKR,MAAMK,UAE9E2B,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YACfR,EAAAC,EAAAC,cAACU,EAAA,aAAD,CAAcC,YAAY,iBAAiBC,cAAe,SAAApB,GAAK,OAAIE,EAAKmB,cAAcrB,KACpFG,GAEFG,EAAAC,EAAAC,cAACU,EAAA,aAAD,CAAcC,YAAY,cAAcC,cAAe,SAAApB,GAAK,OAAIE,EAAKoB,WAAWtB,KAC7EU,aAtEOa,mBCElBC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.c7132b66.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\nimport axios from 'axios';\nimport {SimpleSelect} from 'react-selectize';\n\nclass App extends Component {\n  state={\n    data: {},\n    country: \"Estonia\",\n    countries: [],\n    year: 2018,\n    title: \"\",\n    x: [],\n    y: []\n  }\n\n  componentDidMount(){\n    this.getData()\n    this.getCountries()\n  }\n  getCountries(){\n    axios.get(`https://api.population.io/1.0/countries/`)\n      .then(res => {    \n      this.setState({countries: res.data.countries})\n      })  \n    }\n\n  getData(){\n    axios.get(`https://api.population.io/1.0/population/${this.state.year}/${this.state.country}/?format=json`)\n    .then(res => {\n      this.setState({ data: res.data }, ()=>{\n        this.dataToPlot()\n      })\n    })\n  }\n\n  dataToPlot(){\n    let x = []\n    let y = []\n    this.state.data.forEach(el=>{\n      x.push(el.age)\n      y.push(el.total)\n    })\n    this.setState({x, y})\n    this.setState({title: this.state.country +\", \" +this.state.year})\n\n  }\n  updateYear(el){\n    this.setState({year: el.value}, ()=> this.getData())\n  }\n\n  updateCountry(el){\n    if(!el){\n      return;\n    }\n    this.setState({country: el.value}, ()=> this.getData());\n  }\n  render() {\n    let countryOptionItems = this.state.countries.map((country, i) =>\n                <option key={i} value={country}>{country}</option>\n            );\n    let yearOptionItems = [...Array(151)].map((el, i) => \n      <option key={i} value={\"\" + (i+1950) + \"\"}>{\"\"+ (i+1950) + \"\"}</option>\n    );      \n    return <div className=\"App\">\n        <div className=\"container\">\n        <div className = \"header\"><h3>api.population.io</h3>Retrieve population tables for a given year and country. Returns tables for all ages from 0 to 100.</div>\n         <div className = \"data\">\n         <Plot data={[{ y: this.state.y, type: \"line\" }]} layout={{ title: this.state.title }} />\n         </div>\n        <div className=\"controls\">\n        <SimpleSelect placeholder=\"Change country\" onValueChange={value => this.updateCountry(value)}>\n         {countryOptionItems}\n        </SimpleSelect>\n        <SimpleSelect placeholder=\"Change year\" onValueChange={value => this.updateYear(value)}>\n          {yearOptionItems}\n        </SimpleSelect>\n        </div>\n        </div>\n      </div>\n  \n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport '../node_modules/react-selectize/themes/index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}